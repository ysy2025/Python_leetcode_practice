# 给定一位研究者论文被引用次数的数组（被引用次数是非负整数），数组已经按照升序排列。编写一个方法，计算出研究者的 h 指数。
# h 指数的定义: “h 代表“高引用次数”（high citations），一名科研人员的 h 指数是指他（她）的 （N 篇论文中）至多有
# h 篇论文分别被引用了至少 h 次。（其余的 N - h 篇论文每篇被引用次数不多于 h 次。）"
# 示例:
# 输入: citations = [0,1,3,5,6]
# 输出: 3
# 解释: 给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 0, 1, 3, 5, 6 次。
#      由于研究者有 3 篇论文每篇至少被引用了 3 次，其余两篇论文每篇被引用不多于 3 次，所以她的 h 指数是 3。
# 说明:
# 如果 h 有多有种可能的值 ，h 指数是其中最大的那个。
# 链接：https://leetcode-cn.com/problems/h-index-ii
# 下面的是初稿，起初想的是长度大于2的，找到对应的low和high（按照条件找的），然后提取出对应的h指数
# 但是，因为长度是个问题。不同长度提取出来的不一样，而最后的筛选规则是相同的。所以我调整了策略，在前面改成获取low和high
# 最后提取h指数。
# class solution:
#     def find_h(self, nums):
#         length = len(nums)
#         low = 0
#         high = length - 1
#         while high - low > 1:
#             mid = (low + high)//2
#             if nums[mid] >= length - mid:
#                 high = mid
#             else:
#                 low = mid
#         if nums[low] < length - low and nums[high] > length - high:
#             h = length - high
#         if nums[low] > length - low and nums[high] > length - high:
#             h = length - low
#         if nums[low] < length - low and nums[high] < length - high:
#             h = length - high - 1
#         return int(h)
# a = solution()
# re = a.find_h([1,2,3,4,5,6,7,8,9,10])
# print(re)

class solution:
    def find_h(self, nums):
        length = len(nums)
        if len(nums) == 0:
            return 0
        if len(nums) == 1:
            low = 0;high = 0
        if len(nums) == 2:
            low = 0;high = 1
        if len(nums) > 2:
            low, high = self.find_h_low_high(nums)
        if nums[low] < length - low and nums[high] >= length - high:
            print('awesome 1!')
            h = length - high
        if nums[low] >= length - low and nums[high] >= length - high:
            print('moment 1!')
            h = length - low
        if nums[low] < length - low and nums[high] < length - high:
            print('holy shit1!')
            h = length - high - 1
        return h
    def find_h_low_high(self, nums):
        length = len(nums)
        low = 0
        high = length - 1
        while high - low > 1:
            print('index of low=', low, 'index of high=', high)
            print('value high = ', nums[high], 'value low =', nums[low])
            mid = (low + high) // 2
            print('first index of mid=', mid, 'first mid value=', nums[mid])
            if nums[mid] >= length - mid:
                high = mid
            else:
                low = mid
            print('last low=', low, 'last high=', high)
            print('last high = ', nums[high], 'last low=', nums[low])
        print('final index of low=', low, 'final index of high=', high)
        print('final value of high = ', nums[high], 'final value of low=', nums[low])
        return low, high
a = solution()
re = a.find_h([])
print(re)

