# 给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。
#
# 你的算法时间复杂度必须是 O(log n) 级别。
#
# 如果数组中不存在目标值，返回 [-1, -1]。
#
# 示例 1:
#
# 输入: nums = [5,7,7,8,8,10], target = 8
# 输出: [3,4]
# 示例 2:
#
# 输入: nums = [5,7,7,8,8,10], target = 6
# 输出: [-1,-1]
class solution:
    def find_number(self, array, target):
        if len(array) == 0: return [-1, -1]
        first = self.find_first(array, target)
        last = self.find_last(array, target)
        return [first, last]

    def find_first(self, array, target):
        low = 0
        high = len(array) - 1
        while high - low > 1:
            mid = (low + high) // 2
            if array[mid] >= target:
                high = mid
            else:
                low = mid
        if array[low] != target and array[high] != target:
            return -1
        else:
            if array[low] == target:
                return low
            elif array[high] == target:
                return high

    def find_last(self, array, target):
        low = 0
        high = len(array) - 1
        while high - low > 1:
            mid = (low + high) // 2
            if array[mid] <= target:
                low = mid
            else:
                high = mid
        if array[low] != target and array[high] != target:
            return -1
        else:
            if array[high] == target:
                return high
            elif array[low] == target:
                return low


a = solution()
re = a.find_number([4], 5)
print(re)
# yes！第一次就成功了！
