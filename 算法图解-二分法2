leetcode No.162
峰值元素是指其值大于左右相邻值的元素。

给定一个输入数组 nums，其中 nums[i] ≠ nums[i+1]，找到峰值元素并返回其索引。

数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。

你可以假设 nums[-1] = nums[n] = -∞。
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        temp = ''
        for keys, values in enumerate(nums):
            if keys == 0:
                if -float("inf")  <nums[0]  and nums[0] > nums[1]:
                    temp+='0'
            elif keys == len(nums)-1:
                if nums[len(nums)-2]<nums[len(nums)-1] and nums[len(nums)-1]>-float("inf") :
                    temp+=str((len(nums)-1))
            else:
                if nums[keys-1]<nums[keys] and nums[keys]>nums[keys+1]:
                    temp+=str(keys)
        return int(temp)
我的思路只能输出一堆满足峰值的元素但是无法随机返回一个峰值，而且复杂度也很高。为什么是二分法？肯定和二分法相关。
默认-1和le你（nums）为-无穷，就是意味着最左边和最右边都肯定满足小于的关系。
所以可以利用二分法，判断一下mid-1和mid大小，然后让大的方向成为下一个寻找峰值的小区间，这样肯定满足最左边或者最右边肯定
符合小于的关系。
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        if len(nums)==1:
            return 0
        else:
            left = 0
            right = len(nums)-1
            while left +1 < right:#算起来是len>2,也就是长度大于3，这样才有mid的意义
                mid = (left+right)//2
                if nums[mid] > nums[mid-1]:#[0,1,2,3,4,5,6,7,8,9]的4（mid）大于3，那么让3成为新的片段的nums【-1】
                    left = mid
                if nums[mid] < nums[mid-1]:#[0,1,2,3,4,5,6,7,8,9]的4（mid）小于3，那么让4成为新的片段的nums[n]
                    right = mid
            #如果得到的right和left相邻，只剩right和left两个数字了,因为已经确保了left和right的左右都小
            if nums[left] < nums[right]:
                return right
        if nums[left] > nums[right]:
            return left
