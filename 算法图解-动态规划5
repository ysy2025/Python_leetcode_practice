leetcode No.746
数组的每个索引做为一个阶梯，第 i个阶梯对应着一个非负数的体力花费值 cost[i](索引从0开始)。
每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。
您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。
示例 1:
输入: cost = [10, 15, 20]
输出: 15
解释: 最低花费是从cost[1]开始，然后走两步即可到阶梯顶，一共花费15。

class so:
    def mincost(self, cost):
        if len(cost) == 0:
            return 0
        if len(cost) == 1:
            return cost[0]
        if len(cost) == 2:
            return min(cost[0], cost[1])
        else:
            go = []
            nogo = []
            i = 0
            while i < len(cost):
                if i == 0:
                    go.append(cost[0])
                    nogo.append(0)
                    i += 1
                elif i == 1:
                    go.append(min((go[0] + cost[1]), cost[1]))
                    nogo.append(go[0])
                    i += 1
                else:
                    go.append(min((go[i - 1] + cost[i]), (go[i - 2] + cost[i])))
                    nogo.append(go[i - 1])
        return min(go[len(cost) - 1], nogo[len(cost) - 1])
哈哈，成功了.
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        if len(cost) == 0:
            return 0
        if len(cost) == 1:
            return cost[0]
        if len(cost) == 2:
            return min(cost[0],cost[1])
        else:
            #go and no go，字面意思，过，不过台阶。
            go,nogo =cost[1],cost[0]
            for i in range(2, len(cost)):
                nogo,go=go,min(go+cost[i],nogo+cost[i])
        return min(go,nogo)
简单优化了一下，稍微好一点。
