leetcode No.860
class Solution:
    def lemonadeChange(self, bills: List[int]) -> bool:
        bills_needed = 0
        bills_have = []
        for i in range(len(bills)):
            if bills[i] == 5:
                bills_have.append(bills[i])
            else:
                bills_needed=bills[i]-5
                if sum(bills_have)<bills_needed:
                    return False
                else:
                    bills_have.sort()
                    if bills_have[0]> bills_needed:
                        return False
                    else:
                        while bills_needed and len(bills_have)>0:
                            j = len(bills_have)-1
                            k = j
                            if bills_have[k] > bills_needed:
                                k-=1
                            else:
                                bills_needed -= bills_have[k]
                                bills_have.pop(k)
                bills_have.append(bills[j])
        return True
好吧超出时间限制
接着优化
class Solution:
    def lemonadeChange(self, bills: List[int]) -> bool:
        bills_needed = 0
        bills_have = []
        for i in range(len(bills)):
            if bills[i] == 5:
                bills_have.append(bills[i])
            else:
                bills_needed=bills[i]-5
                if sum(bills_have)<bills_needed:
                    return False
                else:
                    while bills_needed and bills_have:
                        bills_have.sort()
                        if bills_have[0]> bills_needed:
                            return False
                        else:
                            j = len(bills_have)-1
                            k = j
                            if bills_have[k] > bills_needed:
                                k-=1
                            else:
                                bills_needed -= bills_have[k]
                                bills_have.pop(k)
                bills_have.append(bills[j])
        return True
改进了一下
class Solution:
    def lemonadeChange(self, bills: List[int]) -> bool:
        bills_needed = 0
        bills_have = []
        for i in range(len(bills)):
            print('bills[i]=',bills[i])
            if bills[i] == 5:
                bills_have.append(bills[i])
            else:
                bills_needed=bills[i]-5
                if sum(bills_have)<bills_needed:
                    return False
                elif sum(bills_have) == bills_needed:
                    bills_have = []
                    bills_have.append(bills[i])
                else:
                    bills_have.sort()
                    if bills_have[0]> bills_needed:
                        return False
                    else:
                        while bills_needed and bills_have:
                            if bills_have[0]> bills_needed:
                                return False
                            else:
                                j = len(bills_have)-1
                                k = j
                                if bills_have[k] > bills_needed:
                                    k-=1
                                else:
                                    bills_needed -= bills_have[k]
                                    bills_have.pop(k)
                bills_have.append(bills[i])
        return True
还是超过时间限制


class Solution:
    def lemonadeChange(self, bills: List[int]) -> bool:
        if not bills:
            return False
        bills_needed = 0
        bills_have = []
        for i in range(len(bills)):
            print('bills[i]=', bills[i])
            if bills[i] == 5:
                bills_have.append(bills[i])
            else:
                bills_needed = bills[i] - 5
                if sum(bills_have) < bills_needed:
                    return False
                elif sum(bills_have) == bills_needed:
                    bills_have = []
                    bills_have.append(bills[i])
                else:
                    bills_have.sort()
                    if bills_have[0] > bills_needed:
                        return False
                    else:
                        if self.billchange(bills_needed, bills_have):
                            bills_have.append(bills[i])
                        else:
                            return False
        return True

    def billchange(self, bills_needed, bills_have):
        bills_have.sort()
        if bills_have[0] > bills_needed:
            return False
        else:
            while bills_needed and bills_have:
                if bills_have[0] > bills_needed:
                    return False
                else:
                    j = len(bills_have) - 1
                    k = j
                    if bills_have[k] > bills_needed:
                        k -= 1
                    else:
                        bills_needed -= bills_have[k]
                        bills_have.pop(k)
        return True
稍微改写了一下如上
还是评论区大神思路更加清晰
我总是纠结在细微之处，却忘了宏观把握题目的思路。好的思路胜于细微琢磨千百次
class Solution:
    def lemonadeChange(self, bills: List[int]) -> bool:
         #考虑3种情况
        d = {5:0, 10:0, 20:0} #用一个字典存储剩余零钱
        for i in bills:
            if i == 5:   #付5美元，零钱中5美元数量+1
                d[5] += 1
            if i == 10:  #付10美元只能通过5美元找零，检查5美元数量
                if d[5] == 0:
                    return False
                d[10] += 1
                d[5] -= 1
            if i == 20:  #付20美元，有两种方式找零，10+5或者5+5+5
                #通过分析发现，5美元找零消耗量最大，所以找零优先考虑10+5
                if d[10] >= 1 and d[5] >= 1:
                    d[10] -= 1
                    d[5] -= 1
                elif d[5] >= 3:
                    d[5] -= 3
                else:
                    return False
                d[20] += 1
        return True
   我倒是变得贪心了。想一口气吃个胖子。遇到问题先思考思路，不要总是一股脑上头解题。
