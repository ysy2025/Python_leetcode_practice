leetcode No.794
O的数量不能大于X的数量。
X的数量超出O的数量不能大于1。
不能同时存在O胜利和X胜利。
如果O胜利，那么O的数量一定等于X的数量。
如果X胜利，那么X的数量一定比O的数量多1。
class so:
    def valid(self, board):
        temp = []
        for each in board:
            temp+=list(each)
        if temp.count('O')-temp.count('X')>0:
            return False
        else:
            if count(temp,'O') in end and count(temp,'X') in end:
                return False
            else:
                return True
    def count_alpha(self,temp,a):
        count_alpha = ''
        for i in range(len(temp)):
            if temp[i] == a:
                count_alpha+=str(i)
            return count_alpha
思路有，但是没办法清晰呈现出来。关键是怎么判断胜利。

def win(self, board, P):
    # board is list[str]
    # P is 'X' or 'O' for two players
    for j in range(3):
        if all(board[i][j] == P for i in range(3)): return True
        if all(board[j][i] == P for i in range(3)): return True
    if board[0][0] == board[1][1] == board[2][2] == P: return True
    if board[0][2] == board[1][1] == board[2][0] == P: return True
    return False
作者：负雪明烛：https: // blog.csdn.net / fuxuemingzhu / article / details / 83053972
我有想法，但是没法像作者一样清晰表达出来。。失策，失策啊。
结合起来如下：
class so:
    def valid(self, board):
        temp = []
        for each in board:
            temp+=list(each)
        if temp.count('O')-temp.count('X')>0:
            return False
        elif temp.count('X')-temp.count('O')>1:
            return False
        elif temp.count('O')==temp.count('X')-1 and self.win(board, 'O'):#X比O多，O还赢了，这就不对了。
            return False
        elif temp.count('O')==temp.count('X') and self.win(board,'X'):#X和O一样，X还赢了，这就不对了。
            return False
        return True

    def win(self, board, P):
        # board is list[str]
        # P is 'X' or 'O' for two players
        for j in range(3):
            if all(board[i][j] == P for i in range(3)): return True
            if all(board[j][i] == P for i in range(3)): return True
        if board[0][0] == board[1][1] == board[2][2] == P: return True
        if board[0][2] == board[1][1] == board[2][0] == P: return True
厉害了！
