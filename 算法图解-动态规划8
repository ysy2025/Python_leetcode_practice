leetcode No.343
给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。
示例 1:
输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1。
示例 2:
输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。
class Solution:
    def integerBreak(self, n: int) -> int:
        dp = [0]*(n+1)
        dp[1] = 1
        for i in range(2,n+1):
            for j in range(1,i):
                temp = dp[j] * dp[i-j]
                dp[i]=max(temp,j*(i-j),dp[i])
        return dp[-1]
上面的式子唯一问题在8.8拆成2+6,2*dp【6】比dp【2】*dp【6】大，因为2》dp【2】。此外，3,也有同样的问题
所以有了下面的式子
class Solution:
    def integerBreak(self, n: int) -> int:
        dp = [0]*(n+1)
        dp[1] = 1
        for i in range(2,n+1):
            for j in range(1,i):
                temp = max((j*dp[i-j]),((i-j)*dp[j]),(dp[j] * dp[i-j]))
                dp[i]=max(temp,j*(i-j),dp[i])
        return dp[-1]
但是还是太慢了，是不是temp的max？
class Solution:
    def integerBreak(self, n: int) -> int:
        dp = [0]*(n+1)
        dp[1] = 1
        for i in range(2,n+1):
            for j in range(1,i):
                if j > dp[j]:
                    temp = j*dp[i-j]
                else:
                    temp = dp[j] * dp[i-j]
                dp[i]=max(temp,j*(i-j),dp[i])
        return dp[-1]
好吧，看来if+else比max慢很多。max的操作大于16.67%，if+else仅仅超了1.43%
class Solution:
    def integerBreak(self, n: int) -> int:
        dp = [0] * (n + 1)
        dp[1] = 1
        for i in range(2, n + 1):
            for j in range(1, i):
                if j == 2 or j == 3:
                    temp = j * dp[i - j]
                else:
                    temp = dp[j] * dp[i - j]
                dp[i] = max(temp, j * (i - j), dp[i])
        return dp[-1]
这样的操作超过8.57%,没有max好。
python里面逻辑判断先天慢啊。
