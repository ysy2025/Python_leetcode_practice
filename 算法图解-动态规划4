你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，
影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，
如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
示例 1:
输入: [1,2,3,1]
输出: 4
解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2:
输入: [2,7,9,3,1]
输出: 12
解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
首次自主研发动态规划成功。。
class Solution:
    def rob(self, nums: List[int]) -> int:
        steal = []
        if len(nums) == 0:
            return 0
        elif len(nums) <3:
            return max(nums)
        else:
            steal.append(nums[0])
            steal.append(nums[1])
            for i in range(2,len(nums)):
                steal.append(nums[i]+max(steal[:i-1]))
        return max(steal[-1],steal[-2])
日常评论区大触——贪心算法
def rob(self, nums: List[int]) -> int:
    # rob1 表示这一家偷了的结果，rob2表示这一家不偷的最大收益
    rob1, rob2 = 0, 0
    for num in nums:
        rob1, rob2 = rob2 + num, max(rob1, rob2)

    return max(rob1, rob2)
