leetcode No.70
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
注意：给定 n 是一个正整数。
class Solution:
    def climbStairs(self, n: int) -> int:
        if n == 1:
            return 1
        if n == 2:
            return 2
        return self.climbStairs(n-1)+self.climbStairs(n-2)
好吧，斐波那契的递归形式不行。时间复杂度太大了。
还是动态规划吧。
class Solution:
    def climbStairs(self, n: int) -> int:
        if n == 1 or n == 2:
            return n
        a,b = 0,1
        while n>0:
            a,b = b,a+b
            n-=1
        return b
简化一下。还是斐波那契那一套，不过复杂度大大降低了。
