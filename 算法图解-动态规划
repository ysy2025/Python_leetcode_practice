leetcode No.53
给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
示例:
输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        if min(nums)>=0:
            return sum(nums)
        if max(nums)<=0:
            return max(nums)
        result = []
        for j in range(1,len(nums)+1):
            for i in range(len(nums)+1-j):
                result.append(sum([nums[i] for i in range(i,i+j)]))
        return max(result)
好吧，超出时间限制了，umumum。
class so:
    def maxsub(self, nums):
        if min(nums)>=0:
            return sum(nums)
        if max(nums)<=0:
            return max(nums)
        result = []
        for j in range(1,len(nums)+1):
            subresult = []
            for i in range(len(nums)+1-j):
                subresult.append(sum([nums[i] for i in range(i,i+j)]))
            result.append(subresult)
        return (result)
上面得出的是【【】】嵌套的形式。
但是都是暴力破解，还是没能把握住动态规划的精髓。
Kadane算法扫描一次整个数列的所有数值，在每一个扫描点计算以该点数值为结束点的子数列的最大和（正数和）。
该子数列由两部分组成：以前一个位置为结束点的最大子数列、该位置的数值。
因为该算法用到了“最佳子结构”（以每个位置为终点的最大子数列都是基于其前一位置的最大子数列计算得出），
该算法可看成动态规划的一个例子。
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        for i in range(1, len(nums)):
            nums[i]= nums[i] + max(nums[i-1], 0)
        return max(nums)
碉堡的算法。思想是动态规划，nums[i-1]并不是数组前一项的意思，而是到前一项为止的最大子序和，
和0比较是因为只要大于0，就可以相加构造最大子序和。如果小于0则相加为0，nums[i]=nums[i]，
相当于最大子序和又重新计算。其实是一边遍历一边计算最大序和。
感谢付楷峰老铁的程序。太优秀了。
