给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。
如果没有任何一种硬币组合能组成总金额，返回 -1。
示例 1:
输入: coins = [1, 2, 5], amount = 11
输出: 3
解释: 11 = 5 + 5 + 1
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        if amount < coins[0]:
            return -1
        else:
            for i in range(len(coins),0,-1):
                print('coins=',coins[i-1])
                if amount%coins[i-1]==0:
                    return amount/coins[i-1]
                else:
                    print('amount=',amount)
                    count = 0
                    if (amount%coins[i-1]) in coins:
                        return (amount//(coins[-1])+1)
                    else:
                        if amount//(coins[i-1])>1:
                            amount -=coins[i-1]
                            return int(1+self.coinChange(coins,amount))
暂时只能想到这么多。对于小型问题可以解决了。

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        for i in range(len(coins), 0, -1):
            if amount < coins[0]:
                return -1
            print('coins=', coins[i - 1])
            if amount % coins[i - 1] == 0:
                return amount / coins[i - 1]
            else:
                print('amount=', amount)
                count = 0
                if (amount % coins[i - 1]) in coins:
                    return (amount // (coins[-1]) + 1)
                else:
                    if len(coins) == 1:
                        return -1
                    else:
                        if amount // (coins[i - 1]) >= 1:
                            amount -= coins[i - 1]
                            print('amount=', amount)
                            temp = self.coinChange(coins, amount)
                            if temp == -1:
                                return -1
                            else:
                                print('temp=', temp)
                                return (1 + temp)
                        if amount // (coins[i - 1]) < 1:
                            continue
按照提交报错修改的。好像没啥用啊。动态规划没用上啊。这种只能在最大值上面不停的减啊减。该看看评论了。
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        have = {0:0}
        for a in range(1,amount+1):
            for c in coins:
                if a==c:
                    have[a] = 1
                else:
                    if (a-c) in have:
                        have[a]=min((have[a-c]+1),have.get(a,float('inf')))
        return have.get(amount,-1)
是啊，我的思路和我执行的操作完全反过来了。我想的是1,2,3,4一个一个数，做的却完全不是。。umum真是醉了。
还有一个答案非常精彩
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [float("inf")] * (amount+1)
        dp[0] = 0
        for i in range(1,amount+1):
            for coin in coins:
                if i - coin>= 0:
                    dp[i] = min(dp[i],dp[i-coin]+1)
        return dp[-1] if dp[-1]!= float("inf") else -1
    类似的思路。比我的强太多了。
还超出时间限制umum。
leetcode英语版本的评论区答案
class Solution(object):
    def coinChange(self, coins, amount):
        """
        :type coins: List[int]
        :type amount: int
        :rtype: int
        """
        if amount == 0:
            return 0
        value1 = [0]
        value2 = []
        nc =  0
        visited = [False]*(amount+1)
        visited[0] = True
        while value1:
            nc += 1
            for v in value1:
                for coin in coins:
                    newval = v + coin
                    if newval == amount:
                        return nc
                    elif newval > amount:
                        continue
                    elif not visited[newval]:
                        visited[newval] = True
                        value2.append(newval)
            value1, value2 = value2, []
        return -1
上面的思路是倒退，0,0+coin，而不是1,2,3这样一个一个数过去，只讨论coin能构成的amount。
结合上面的两种思路就得到了
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [0] + [float('inf')] * amount
        for coin in coins:
            for i in range(coin, amount + 1):
                dp[i] = min(dp[i], dp[i - coin] + 1)
        return dp[-1] if dp[-1] != float('inf') else -1
有可能的话，跳过1,2,3一直到最小coin的步骤，节省了很多空间。厉害！
